######### File 1 - data_analysis.py ##########
## Produce a text file containing only crimes from 2018
import re
f = open( 'Arrest_Data.csv', 'r' )
crimes_18 = []
for line in f:
    cells = line.split( "," ) ## Split into cells
    regex = re.compile('../../2018') ## We're looking for the 
    								 ## date format, and it 
    								 ## must end in 2018
    matches = [string for string in cells if re.match(regex, string)]
    if matches != []: ## if it matches the date format, append it
    	crimes_18.append(line.strip())
f.close() # Data stored locally so close file
#print(dates)
#print(crimes_18)
print(f'There were: ', len(crimes_18), " crimes in 2018")
## Write 2018 dates to a new file to save on analysis time
with open("crimes_2018.txt", 'w') as f:
	for item in crimes_18:
		f.write("%s\n" % item)

######### File 2 - data_analysis.py ##########
## Find most arrests, age percentiles, z-scores
import collections
from collections import Counter
import statistics
import numpy as np
import math
import functools

f = open( 'crimes_2018.txt', 'r' )
crimes_18 = []
dates = []
areas = []
headers = ["Report ID", "Arrest Date", "Time", "Area ID", 
"Area Name", "Reporting District", "Age", "Sex Code", 
"Descent Code", "Charge Group Code", "Charge Group Description", 
"Arrest Type Code", "Charge", "Charge Description", "Address", 
"Cross Street", "Location"]
# We want everything under this header
header_index = headers.index('Area Name')

for line in f:
	crimes_18.append(line)

####### Functions ########

# Function to find the most arrests for each crime
def most_arrests(arrays, header_index):
	for line in crimes_18:
	    cells = line.strip().split( "," ) ## Split into cells
	    area_name = cells[header_index] ## We're looking for the index 
	    								## that contains area names
	    areas.append(area_name)
	Data = collections.Counter(areas)
	area_dict = {}
	cnt = Counter(Data)
	for key, value in cnt.items():
	    area_dict[key] = value

	#print(area_dict)
	most_common = max(area_dict, key=area_dict.get)  
	print(f"""The most arrestees were booked in {most_common}. 
There were {area_dict[most_common]} arrests.""")

# Produce a list of ages for each crime
def age_quantiles(interesting, array, keyword):
	arrestee_age = []
	crimes_of_interest = []
	for crime in interesting:
		for line in array:
			cells = line.strip().split( "," ) ## Split into cells
			if cells[crime_type] == crime: ## Check it's a crime we
				crimes_of_interest.append(cells)      ## care about
				arrestee_age.append(int(cells[headers.index(keyword)]))
	return(arrestee_age)

######## Most Arrests ##########
most_arrests(crimes_18, header_index) ## From the list of crimes in 2018

## Selective arrests
crime_type = headers.index("Charge Group Description")
#print(crime_type)
interesting_crimes =["Vehicle Theft", "Robbery", "Burglary", 
"Receive Stolen Property"]

####### Age quantiles question ##########
## call the function to get all the relevant ages!
ages = age_quantiles(interesting_crimes, crimes_18, 'Age') 

a = np.percentile(ages, 95) #calculate 95th percentile
print("The 95% quantile for age of arrestees in 2018 is" +"%10f" %a)
mean = sum(ages)/len(ages)

####### Z-Scores Question ########

## clear empty data, i.e. get ring of the things we're not interested in
crimes = []
crime = []
crime_desc = headers.index("Charge Group Description")
for line in crimes_18:
	cells = line.strip().split( "," ) ## Split into cells
	#description = cells[crime_desc]
	if cells[crime_desc] is not "":	
		if  (cells[crime_desc].strip() == "Pre-Delinquency" or 
			cells[crime_desc].strip() == "Non-Criminal Detention"):
			continue
		else:
			crimes.append(cells)
			crime.append(cells[crime_desc])
## Get the crime types (for grouping), and turn it into a list
crime_types = set(crime)
list_crime_types = list(crime_types)

aver_ages = [] ## to store average age for each crime
index_age=(headers.index('Age')) # gives the index of 'Age' in headers
index_desc=(headers.index('Charge Group Description')) 

"""
 Work through each type of crime. When we find it in "line" (the file line), add the age of the person to the total age for that crime. 
 Divide the total by the running counter, n, to get the average age for that crime.
 Repeat for all crimes.
 """
for c in list_crime_types:
	#print(c)
	n=0
	total_age = 0
	for line in crimes:
		if line[index_desc] == c: ## If we match the crime we're referring to
			#age.append(int(line[index_age])) ## append to age
			n= n+1 ## calaculating size of array
			total_age += int(line[index_age])
	aver_ages.append(total_age/n)

## Calculate z-scores
stdev_ages = statistics.stdev(aver_ages) ## Calculating mean and standard 
mean_ages = statistics.mean(aver_ages)	 ## deviations
z_scores = []
for aver in aver_ages:
	z_score = abs((aver - mean_ages)/stdev_ages) ## formula for z score, absoluted
	z_scores.append(z_score)
print(f'The maximum z-score is {max(z_scores):.9f}!')

######### File 3 - felonies.py ##########
## Import Entire dataset. excluding 2019 and offenses 
## considered misdemeanors.
## Write to a text file, trends.txt

import re
f = open( 'Arrest_Data.csv', 'r' )
crimes_felonies = []
dates = []
for line in f:
    cells = line.split( "," ) ## Split into cells
    regex = re.compile('../../2019') ## We're looking for the date format, 
								 ## and it ends in 2018
    matches = [string for string in cells if re.match(regex, string)]
    if matches == []: ## if it matches the date format, append it
    	if "Drunkeness" in line:
    		continue
    	elif "Moving Traffic Violations" in line:
    		continue 
    	elif "Prostitution/Allied" in line:
    		continue
    	elif "Disorderly Conduct" in line:
    		continue
    	elif  "Gambling" in line:
    		continue
    	elif  "Disturbing the Peace" in line:
    		continue
    	elif  "Driving Under Influence" in line:
    		continue
    	else:
    		crimes_felonies.append(line.strip())
f.close() # Data stored locally so close file
#print(dates)
#print(crimes_18)
print(f'There were: ', len(crimes_felonies), " crimes in 2010-2018")
## Write 2018 dates to a new file to save on analysis time
with open("trends.txt", 'w') as f:
	for item in crimes_felonies:
		f.write("%s\n" % item)

######### File 4 - trends.py ##########
## Import felonies.py, and look for numger of felonies
## per year. Produce straight line coefficients for 
## y = mx + c and return for y = m*2019 + c
import collections
from collections import Counter
import statistics
from statistics import mean
import numpy as np
import math
import functools
## Open the file we cut down to include only 2010 -2019
f = open( 'trends.txt', 'r' )
dates = []
n=0
headers = ["Report ID", "Arrest Date", "Time", "Area ID", 
"Area Name", "Reporting District", "Age", "Sex Code", 
"Descent Code", "Charge Group Code", "Charge Group Description", 
"Arrest Type Code", "Charge", "Charge Description", "Address", 
"Cross Street", "Location"]
# We want everything under this header
header_index = headers.index('Arrest Date')

for line in f:
	cells = line.strip().split( "," ) ## Split into cells
	date = cells[header_index]
	dates.append(date[-4:]) ## We only want the year
burglaries = []
year = []

Dates = collections.Counter(dates)
date_dict = {}
cnt = Counter(Dates)
for key, value in cnt.items():
	date_dict[key] = value
	burglaries.append(value)
	year.append(key)

burglaries = burglaries[1:] ## cut off the "title imposed by 
							## counter"
burglaries2 = []

## Convert to correct type (i.e from string to integer).
for i in burglaries:
	burglaries2.append(int(i))
year = year[1:]
year2 = []
for j in year:
	#print(j)
	year2.append(int(j))

meanb = mean(burglaries2)
meany = mean(year2)

multi_wise = [a*b for a,b in zip(year2,burglaries2)] ## xs * ys
x_squared = [a*b for a,b in zip(year2,year2)] ## xs * xs
print(x_squared)

## Gradient:
# m = (((mean(xs)*mean(ys)) - mean(xs*ys)) / ((mean(xs)*mean(xs)) - 
# mean(xs*xs)))
m = (((meany*meanb) - mean(multi_wise)) / ((meany*meany) - mean(x_squared)))
## Y-interecpt:
# c = mean(ys) - m*mean(xs)
c = meanb - m*meany

predicted_2019 = m*2019 + c

print(f"The number of felonies predicted in 2019 is {predicted_2019:.0f}")


